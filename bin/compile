#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>
set -e

mktmpdir() {
  dir=$(mktemp -t fakesu-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

function escape_regex() {
  sed s/\\//\\\\\\//g
}

# Usage: $ set-env key value
function set-env (){
  echo "export $1=$2" >> $PROFILE_PATH
}

BUILDPACK_DIR=`cd $(dirname $0); cd ..; pwd`
BUILD_DIR=$1
CACHE_DIR=$2
GRAPHVIZ_CACHE_DIR="$CACHE_DIR/heroku-graphviz/"
GRAPHVIZ_DIR="$BUILD_DIR/vendor/builds/heroku-graphviz/"
PROFILE_PATH="$BUILD_DIR/.profile.d/graphviz.sh"

mkdir -p $GRAPHVIZ_DIR 
mkdir -p $GRAPHVIZ_CACHE_DIR 
mkdir -p $(dirname $PROFILE_PATH)

cp "$BUILDPACK_DIR/version" $GRAPHVIZ_DIR

if [ -f $GRAPHVIZ_CACHE_DIR/version ] && [ `cat $GRAPHVIZ_CACHE_DIR/version` = `cat $GRAPHVIZ_DIR/version` ]; then
  echo "-----> Copying cached graphviz"
  rm -rf $GRAPHVIZ_DIR
  cp -R $GRAPHVIZ_CACHE_DIR $GRAPHVIZ_DIR
else

  mv $BUILDPACK_DIR/heroku-fontconfig $GRAPHVIZ_DIR
  FONTCONFIG_DIR="$GRAPHVIZ_DIR/heroku-fontconfig"

  sed -i'' -e"s/^prefix=.*/prefix=`echo $FONTCONFIG_DIR | escape_regex`/" "$FONTCONFIG_DIR/lib/pkgconfig/fontconfig.pc"

  export PATH=/sbin:/usr/sbin:$PATH:
  export PKG_CONFIG_PATH="$FONTCONFIG_DIR/lib/pkgconfig:$PKG_CONFIG_PATH"

  echo "-----> Fetching and installing graphviz"
  cd $WGET_BUILD
  curl -O http://www.graphviz.org/pub/graphviz/stable/SOURCES/graphviz-2.34.0.tar.gz
  tar zxvf graphviz-2.28.0.tar.gz
  cd graphviz-2.28.0
  ./configure --prefix=$GRAPHVIZ_DIR --with-pangocairo
  make
  make install
  rm -rf $GRAPHVIZ_CACHE_DIR
  cp -R $GRAPHVIZ_DIR $GRAPHVIZ_CACHE_DIR

fi

# Set context environment variables.
set-env PATH '$PATH:$HOME/vendor/builds/heroku-graphviz/bin'
set-env LD_LIBRARY_PATH '$HOME/vendor/builds/heroku-graphviz/lib/:$HOME/vendor/builds/heroku-graphviz/heroku-fontconfig/lib/'
set-env FONTCONFIG_PATH '$HOME/vendor/builds/heroku-graphviz/heroku-fontconfig/etc/fonts'

echo "grapvhiz installed at $GRAPHVIZ_DIR" | indent

########



set -o errexit    # always exit on error
set -o errtrace   # trap errors in functions as well
set -o pipefail   # don't ignore exit codes when piping output
set -o posix      # more strict failures in subshells
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3
bp_dir=$(cd $(dirname $0); cd ..; pwd)
heroku_dir=$build_dir/.heroku
mkdir -p $heroku_dir/node
warnings=$(mktemp)

# Load dependencies
source $bp_dir/lib/common.sh
source $bp_dir/lib/build.sh
source $bp_dir/lib/warnings.sh

# Avoid GIT_DIR leak from previous build steps
unset GIT_DIR

# Provide hook to deal with errors
trap build_failed ERR

####### Determine current state

head "Reading application state"
read_current_state
show_current_state

if [ "$iojs_engine" == "" ]; then
  warn_node_engine "$node_engine"
else
  warn_node_engine "$iojs_engine"
fi
warn_node_modules "$modules_source"

####### Vendor in binaries

head "Installing binaries"
if [ "$iojs_engine" == "" ]; then
  install_node "$node_engine"
else
  install_iojs "$iojs_engine"
fi
install_npm

####### Build the project's dependencies

head "Building dependencies"
cd $build_dir
build_dependencies

####### Create a Procfile if possible

head "Checking startup method"
ensure_procfile "$start_method" "$build_dir"
warn_start "$start_method"

####### Finalize the build

head "Finalizing build"
write_profile
write_export
clean_npm
clean_cache
create_cache
build_succeeded
