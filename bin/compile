#!/usr/bin/env bash

####### Configure environment
set -e
mktmpdir() {
dir=$(mktemp -t fakesu-$1-XXXX)
rm -rf $dir
mkdir -p $dir
echo $dir
}
function indent() {
c='s/^/ /'
case $(uname) in
Darwin) sed -l "$c";;
*) sed -u "$c";;
esac
}
BUILDPACK_DIR=`cd $(dirname $0); cd ..; pwd`
BUILD_DIR=$1
CACHE_DIR=$2
GRAPHVIZ_BUILD="$(mktmpdir graphviz)"
mkdir -p $CACHE_DIR/.tools/graphviz
export PATH=/sbin:/usr/sbin:$PATH:
echo "-----> Fetching graphviz"
cd $WGET_BUILD
curl -O http://www.graphviz.org/pub/graphviz/stable/SOURCES/graphviz-2.38.0.tar.gz >/dev/null 2>&1
tar zxvf graphviz-2.38.0.tar.gz >/dev/null 2>&1
cd graphviz-2.38.0
echo "-----> Configuring graphviz"
./configure --prefix=$CACHE_DIR/.tools/graphviz >/dev/null 2>&1
echo "-----> Compiling graphviz"
make -j5 >/dev/null 2>&1
echo "-----> Installing graphviz"
make install >/dev/null 2>&1
echo "grapvhiz installed" | indent

###
mkdir -p .profile.d
echo "PATH=\$HOME/$INSTALL_DIR/bin:\$PATH" > .profile.d/grapvhiz.sh
###



set -o errexit    # always exit on error
set -o errtrace   # trap errors in functions as well
set -o pipefail   # don't ignore exit codes when piping output
set -o posix      # more strict failures in subshells
# set -x          # enable debugging

# Configure directories
build_dir=$1
cache_dir=$2
env_dir=$3
bp_dir=$(cd $(dirname $0); cd ..; pwd)
heroku_dir=$build_dir/.heroku
mkdir -p $heroku_dir/node
warnings=$(mktemp)

# Load dependencies
source $bp_dir/lib/common.sh
source $bp_dir/lib/build.sh
source $bp_dir/lib/warnings.sh

# Avoid GIT_DIR leak from previous build steps
unset GIT_DIR

# Provide hook to deal with errors
trap build_failed ERR

####### Determine current state

head "Reading application state"
read_current_state
show_current_state

if [ "$iojs_engine" == "" ]; then
  warn_node_engine "$node_engine"
else
  warn_node_engine "$iojs_engine"
fi
warn_node_modules "$modules_source"

####### Vendor in binaries

head "Installing binaries"
if [ "$iojs_engine" == "" ]; then
  install_node "$node_engine"
else
  install_iojs "$iojs_engine"
fi
install_npm

####### Build the project's dependencies

head "Building dependencies"
cd $build_dir
build_dependencies

####### Create a Procfile if possible

head "Checking startup method"
ensure_procfile "$start_method" "$build_dir"
warn_start "$start_method"

####### Finalize the build

head "Finalizing build"
write_profile
write_export
clean_npm
clean_cache
create_cache
build_succeeded
